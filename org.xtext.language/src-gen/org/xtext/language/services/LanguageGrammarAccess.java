/*
 * generated by Xtext
 */
package org.xtext.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class LanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class BotLanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BotLanguage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBotLanguageAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInstructionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstructionsInstructionParserRuleCall_1_0 = (RuleCall)cInstructionsAssignment_1.eContents().get(0);
		
		//// Language exists of Instructions
		//BotLanguage:
		//	{BotLanguage} instructions+=Instruction*;
		@Override public ParserRule getRule() { return rule; }

		//{BotLanguage} instructions+=Instruction*
		public Group getGroup() { return cGroup; }

		//{BotLanguage}
		public Action getBotLanguageAction_0() { return cBotLanguageAction_0; }

		//instructions+=Instruction*
		public Assignment getInstructionsAssignment_1() { return cInstructionsAssignment_1; }

		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_1_0() { return cInstructionsInstructionParserRuleCall_1_0; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFORLoopParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIFStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cFunctionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFormParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cUsernameParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cPasswordParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cNotificationAdressParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cStartParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cStopParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cLoginURLParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cLogoutParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cButtonParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//// The Bot Language contains 6 different instructions including variables
		//// loops, conditions, functons and the username and the password for the login
		//Instruction returns xbase::XExpression:
		//	Var | FORLoop | IFStatement | Function | Form | Username | Password | NotificationAdress | Start | Stop | LoginURL |
		//	Logout | Button;
		@Override public ParserRule getRule() { return rule; }

		//Var | FORLoop | IFStatement | Function | Form | Username | Password | NotificationAdress | Start | Stop | LoginURL |
		//Logout | Button
		public Alternatives getAlternatives() { return cAlternatives; }

		//Var
		public RuleCall getVarParserRuleCall_0() { return cVarParserRuleCall_0; }

		//FORLoop
		public RuleCall getFORLoopParserRuleCall_1() { return cFORLoopParserRuleCall_1; }

		//IFStatement
		public RuleCall getIFStatementParserRuleCall_2() { return cIFStatementParserRuleCall_2; }

		//Function
		public RuleCall getFunctionParserRuleCall_3() { return cFunctionParserRuleCall_3; }

		//Form
		public RuleCall getFormParserRuleCall_4() { return cFormParserRuleCall_4; }

		//Username
		public RuleCall getUsernameParserRuleCall_5() { return cUsernameParserRuleCall_5; }

		//Password
		public RuleCall getPasswordParserRuleCall_6() { return cPasswordParserRuleCall_6; }

		//NotificationAdress
		public RuleCall getNotificationAdressParserRuleCall_7() { return cNotificationAdressParserRuleCall_7; }

		//Start
		public RuleCall getStartParserRuleCall_8() { return cStartParserRuleCall_8; }

		//Stop
		public RuleCall getStopParserRuleCall_9() { return cStopParserRuleCall_9; }

		//LoginURL
		public RuleCall getLoginURLParserRuleCall_10() { return cLoginURLParserRuleCall_10; }

		//Logout
		public RuleCall getLogoutParserRuleCall_11() { return cLogoutParserRuleCall_11; }

		//Button
		public RuleCall getButtonParserRuleCall_12() { return cButtonParserRuleCall_12; }
	}

	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAtKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Button:
		//	"button " name=STRING " at " STRING;
		@Override public ParserRule getRule() { return rule; }

		//"button " name=STRING " at " STRING
		public Group getGroup() { return cGroup; }

		//"button "
		public Keyword getButtonKeyword_0() { return cButtonKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//" at "
		public Keyword getAtKeyword_2() { return cAtKeyword_2; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }
	}

	public class LoginURLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LoginURL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLoginURLAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLoginURLKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//LoginURL:
		//	{LoginURL} "loginURL = " name=STRING;
		@Override public ParserRule getRule() { return rule; }

		//{LoginURL} "loginURL = " name=STRING
		public Group getGroup() { return cGroup; }

		//{LoginURL}
		public Action getLoginURLAction_0() { return cLoginURLAction_0; }

		//"loginURL = "
		public Keyword getLoginURLKeyword_1() { return cLoginURLKeyword_1; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
	}

	public class LogoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Logout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLogoutAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLogoutKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cAtKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Logout:
		//	{Logout} "logout " name=STRING " at " STRING;
		@Override public ParserRule getRule() { return rule; }

		//{Logout} "logout " name=STRING " at " STRING
		public Group getGroup() { return cGroup; }

		//{Logout}
		public Action getLogoutAction_0() { return cLogoutAction_0; }

		//"logout "
		public Keyword getLogoutKeyword_1() { return cLogoutKeyword_1; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }

		//" at "
		public Keyword getAtKeyword_3() { return cAtKeyword_3; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4() { return cSTRINGTerminalRuleCall_4; }
	}

	public class UsernameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Username");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUsernameAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cUsernameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cAtKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//// definition of the username with key 'username'	
		//Username:
		//	{Username} "username " name=STRING " at " STRING;
		@Override public ParserRule getRule() { return rule; }

		//{Username} "username " name=STRING " at " STRING
		public Group getGroup() { return cGroup; }

		//{Username}
		public Action getUsernameAction_0() { return cUsernameAction_0; }

		//"username "
		public Keyword getUsernameKeyword_1() { return cUsernameKeyword_1; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }

		//" at "
		public Keyword getAtKeyword_3() { return cAtKeyword_3; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4() { return cSTRINGTerminalRuleCall_4; }
	}

	public class PasswordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Password");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPasswordAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPasswordKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cAtKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//// definition of the password with key 'password'	
		//Password:
		//	{Password} "password " name=STRING " at " STRING;
		@Override public ParserRule getRule() { return rule; }

		//{Password} "password " name=STRING " at " STRING
		public Group getGroup() { return cGroup; }

		//{Password}
		public Action getPasswordAction_0() { return cPasswordAction_0; }

		//"password "
		public Keyword getPasswordKeyword_1() { return cPasswordKeyword_1; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }

		//" at "
		public Keyword getAtKeyword_3() { return cAtKeyword_3; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4() { return cSTRINGTerminalRuleCall_4; }
	}

	public class NotificationAdressElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotificationAdress");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNotificationAdressAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAddressKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//// address for notification mails
		//NotificationAdress:
		//	{NotificationAdress} "address =" name=STRING;
		@Override public ParserRule getRule() { return rule; }

		//{NotificationAdress} "address =" name=STRING
		public Group getGroup() { return cGroup; }

		//{NotificationAdress}
		public Action getNotificationAdressAction_0() { return cNotificationAdressAction_0; }

		//"address ="
		public Keyword getAddressKeyword_1() { return cAddressKeyword_1; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
	}

	public class StartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Start");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStartAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStartKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameDATEParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Start:
		//	{Start} "start" name=DATE;
		@Override public ParserRule getRule() { return rule; }

		//{Start} "start" name=DATE
		public Group getGroup() { return cGroup; }

		//{Start}
		public Action getStartAction_0() { return cStartAction_0; }

		//"start"
		public Keyword getStartKeyword_1() { return cStartKeyword_1; }

		//name=DATE
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//DATE
		public RuleCall getNameDATEParserRuleCall_2_0() { return cNameDATEParserRuleCall_2_0; }
	}

	public class DATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DATE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDayAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDayDATE_FORMATTerminalRuleCall_0_0 = (RuleCall)cDayAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMonthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMonthDATE_FORMATTerminalRuleCall_2_0 = (RuleCall)cMonthAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYearAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYearYEARTerminalRuleCall_4_0 = (RuleCall)cYearAssignment_4.eContents().get(0);
		private final Keyword cSpaceKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cHoursAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHoursDATE_FORMATTerminalRuleCall_6_0 = (RuleCall)cHoursAssignment_6.eContents().get(0);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cMinutesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMinutesDATE_FORMATTerminalRuleCall_8_0 = (RuleCall)cMinutesAssignment_8.eContents().get(0);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cSecondAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cSecondDATE_FORMATTerminalRuleCall_10_0 = (RuleCall)cSecondAssignment_10.eContents().get(0);
		
		//DATE:
		//	day=DATE_FORMAT "." month=DATE_FORMAT "." year=YEAR " " hours=DATE_FORMAT ":" minutes=DATE_FORMAT ":"
		//	second=DATE_FORMAT;
		@Override public ParserRule getRule() { return rule; }

		//day=DATE_FORMAT "." month=DATE_FORMAT "." year=YEAR " " hours=DATE_FORMAT ":" minutes=DATE_FORMAT ":" second=DATE_FORMAT
		public Group getGroup() { return cGroup; }

		//day=DATE_FORMAT
		public Assignment getDayAssignment_0() { return cDayAssignment_0; }

		//DATE_FORMAT
		public RuleCall getDayDATE_FORMATTerminalRuleCall_0_0() { return cDayDATE_FORMATTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//month=DATE_FORMAT
		public Assignment getMonthAssignment_2() { return cMonthAssignment_2; }

		//DATE_FORMAT
		public RuleCall getMonthDATE_FORMATTerminalRuleCall_2_0() { return cMonthDATE_FORMATTerminalRuleCall_2_0; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }

		//year=YEAR
		public Assignment getYearAssignment_4() { return cYearAssignment_4; }

		//YEAR
		public RuleCall getYearYEARTerminalRuleCall_4_0() { return cYearYEARTerminalRuleCall_4_0; }

		//" "
		public Keyword getSpaceKeyword_5() { return cSpaceKeyword_5; }

		//hours=DATE_FORMAT
		public Assignment getHoursAssignment_6() { return cHoursAssignment_6; }

		//DATE_FORMAT
		public RuleCall getHoursDATE_FORMATTerminalRuleCall_6_0() { return cHoursDATE_FORMATTerminalRuleCall_6_0; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//minutes=DATE_FORMAT
		public Assignment getMinutesAssignment_8() { return cMinutesAssignment_8; }

		//DATE_FORMAT
		public RuleCall getMinutesDATE_FORMATTerminalRuleCall_8_0() { return cMinutesDATE_FORMATTerminalRuleCall_8_0; }

		//":"
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }

		//second=DATE_FORMAT
		public Assignment getSecondAssignment_10() { return cSecondAssignment_10; }

		//DATE_FORMAT
		public RuleCall getSecondDATE_FORMATTerminalRuleCall_10_0() { return cSecondDATE_FORMATTerminalRuleCall_10_0; }
	}

	public class StopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Stop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStopAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameDATEParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Stop:
		//	{Stop} "stop" name=DATE;
		@Override public ParserRule getRule() { return rule; }

		//{Stop} "stop" name=DATE
		public Group getGroup() { return cGroup; }

		//{Stop}
		public Action getStopAction_0() { return cStopAction_0; }

		//"stop"
		public Keyword getStopKeyword_1() { return cStopKeyword_1; }

		//name=DATE
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//DATE
		public RuleCall getNameDATEParserRuleCall_2_0() { return cNameDATEParserRuleCall_2_0; }
	}

	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		
		//// definition of varialbles with key 'var'	
		//Var:
		//	"var"? name=ID "=" (STRING | INT)?;
		@Override public ParserRule getRule() { return rule; }

		//"var"? name=ID "=" (STRING | INT)?
		public Group getGroup() { return cGroup; }

		//"var"?
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//(STRING | INT)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3_0() { return cSTRINGTerminalRuleCall_3_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_3_1() { return cINTTerminalRuleCall_3_1; }
	}

	public class FORLoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FORLoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cDeclaredParamAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDeclaredParamJvmFormalParameterParserRuleCall_1_0_0 = (RuleCall)cDeclaredParamAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cForExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cForExpressionXExpressionParserRuleCall_1_2_0 = (RuleCall)cForExpressionAssignment_1_2.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cEachExpressionAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cEachExpressionFunctionParserRuleCall_2_0_0 = (RuleCall)cEachExpressionAssignment_2_0.eContents().get(0);
		private final Assignment cEachExpressionAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cEachExpressionVarParserRuleCall_2_1_0 = (RuleCall)cEachExpressionAssignment_2_1.eContents().get(0);
		
		//FORLoop returns xbase::XForLoopExpression:
		//	"for" (declaredParam=JvmFormalParameter ":" forExpression=XExpression) (eachExpression=Function |
		//	eachExpression=Var);
		@Override public ParserRule getRule() { return rule; }

		//"for" (declaredParam=JvmFormalParameter ":" forExpression=XExpression) (eachExpression=Function | eachExpression=Var)
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//declaredParam=JvmFormalParameter ":" forExpression=XExpression
		public Group getGroup_1() { return cGroup_1; }

		//declaredParam=JvmFormalParameter
		public Assignment getDeclaredParamAssignment_1_0() { return cDeclaredParamAssignment_1_0; }

		//JvmFormalParameter
		public RuleCall getDeclaredParamJvmFormalParameterParserRuleCall_1_0_0() { return cDeclaredParamJvmFormalParameterParserRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//forExpression=XExpression
		public Assignment getForExpressionAssignment_1_2() { return cForExpressionAssignment_1_2; }

		//XExpression
		public RuleCall getForExpressionXExpressionParserRuleCall_1_2_0() { return cForExpressionXExpressionParserRuleCall_1_2_0; }

		//eachExpression=Function | eachExpression=Var
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//eachExpression=Function
		public Assignment getEachExpressionAssignment_2_0() { return cEachExpressionAssignment_2_0; }

		//Function
		public RuleCall getEachExpressionFunctionParserRuleCall_2_0_0() { return cEachExpressionFunctionParserRuleCall_2_0_0; }

		//eachExpression=Var
		public Assignment getEachExpressionAssignment_2_1() { return cEachExpressionAssignment_2_1; }

		//Var
		public RuleCall getEachExpressionVarParserRuleCall_2_1_0() { return cEachExpressionVarParserRuleCall_2_1_0; }
	}

	public class IFStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IFStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIfKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cIfAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIfXExpressionParserRuleCall_0_1_0 = (RuleCall)cIfAssignment_0_1.eContents().get(0);
		private final Keyword cThenKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cThenAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cThenFunctionParserRuleCall_0_3_0 = (RuleCall)cThenAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cThenAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cThenVarParserRuleCall_1_0_0 = (RuleCall)cThenAssignment_1_0.eContents().get(0);
		private final Keyword cElseKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cElseAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cElseFunctionParserRuleCall_1_2_0 = (RuleCall)cElseAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cElseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElseAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElseVarParserRuleCall_2_1_0 = (RuleCall)cElseAssignment_2_1.eContents().get(0);
		
		//IFStatement returns xbase::XIfExpression:
		//	"if" if=XExpression "then" then=Function | then=Var "else" else=Function | "else" else=Var;
		@Override public ParserRule getRule() { return rule; }

		//"if" if=XExpression "then" then=Function | then=Var "else" else=Function | "else" else=Var
		public Alternatives getAlternatives() { return cAlternatives; }

		//"if" if=XExpression "then" then=Function
		public Group getGroup_0() { return cGroup_0; }

		//"if"
		public Keyword getIfKeyword_0_0() { return cIfKeyword_0_0; }

		//if=XExpression
		public Assignment getIfAssignment_0_1() { return cIfAssignment_0_1; }

		//XExpression
		public RuleCall getIfXExpressionParserRuleCall_0_1_0() { return cIfXExpressionParserRuleCall_0_1_0; }

		//"then"
		public Keyword getThenKeyword_0_2() { return cThenKeyword_0_2; }

		//then=Function
		public Assignment getThenAssignment_0_3() { return cThenAssignment_0_3; }

		//Function
		public RuleCall getThenFunctionParserRuleCall_0_3_0() { return cThenFunctionParserRuleCall_0_3_0; }

		//then=Var "else" else=Function
		public Group getGroup_1() { return cGroup_1; }

		//then=Var
		public Assignment getThenAssignment_1_0() { return cThenAssignment_1_0; }

		//Var
		public RuleCall getThenVarParserRuleCall_1_0_0() { return cThenVarParserRuleCall_1_0_0; }

		//"else"
		public Keyword getElseKeyword_1_1() { return cElseKeyword_1_1; }

		//else=Function
		public Assignment getElseAssignment_1_2() { return cElseAssignment_1_2; }

		//Function
		public RuleCall getElseFunctionParserRuleCall_1_2_0() { return cElseFunctionParserRuleCall_1_2_0; }

		//"else" else=Var
		public Group getGroup_2() { return cGroup_2; }

		//"else"
		public Keyword getElseKeyword_2_0() { return cElseKeyword_2_0; }

		//else=Var
		public Assignment getElseAssignment_2_1() { return cElseAssignment_2_1; }

		//Var
		public RuleCall getElseVarParserRuleCall_2_1_0() { return cElseVarParserRuleCall_2_1_0; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionsVarParserRuleCall_3_0 = (RuleCall)cActionsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cAtKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cSTRINGTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		////ELSEIFStatement returns xbase::XIfExpression:
		////	{IFStatement}
		////	'elseif' if = XExpression
		////	'then' then = Function | then = Var
		////	else = ELSEIFStatement | 'else' else = Function | 'else' else = Var
		////;
		//// definition of functions with key 'func'	
		//Function:
		//	"func" name=ID "(" actions+=Var* ")" "at" // Spaeter evtl XPATH spezieller striung als regel	
		//	STRING;
		@Override public ParserRule getRule() { return rule; }

		//"func" name=ID "(" actions+=Var* ")" "at" // Spaeter evtl XPATH spezieller striung als regel	
		//STRING
		public Group getGroup() { return cGroup; }

		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//actions+=Var*
		public Assignment getActionsAssignment_3() { return cActionsAssignment_3; }

		//Var
		public RuleCall getActionsVarParserRuleCall_3_0() { return cActionsVarParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"at"
		public Keyword getAtKeyword_5() { return cAtKeyword_5; }

		//// Spaeter evtl XPATH spezieller striung als regel	
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_6() { return cSTRINGTerminalRuleCall_6; }
	}

	public class FormElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Form");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFormAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFormKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cAtKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cSTRINGTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Form:
		//	{Form} "form = " name=STRING "at" //Xpath
		//	STRING;
		@Override public ParserRule getRule() { return rule; }

		//{Form} "form = " name=STRING "at" //Xpath
		//STRING
		public Group getGroup() { return cGroup; }

		//{Form}
		public Action getFormAction_0() { return cFormAction_0; }

		//"form = "
		public Keyword getFormKeyword_1() { return cFormKeyword_1; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }

		//"at"
		public Keyword getAtKeyword_3() { return cAtKeyword_3; }

		////Xpath
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4() { return cSTRINGTerminalRuleCall_4; }
	}
	
	
	private final BotLanguageElements pBotLanguage;
	private final InstructionElements pInstruction;
	private final ButtonElements pButton;
	private final LoginURLElements pLoginURL;
	private final LogoutElements pLogout;
	private final UsernameElements pUsername;
	private final PasswordElements pPassword;
	private final NotificationAdressElements pNotificationAdress;
	private final StartElements pStart;
	private final DATEElements pDATE;
	private final TerminalRule tDATE_FORMAT;
	private final TerminalRule tYEAR;
	private final StopElements pStop;
	private final VarElements pVar;
	private final FORLoopElements pFORLoop;
	private final IFStatementElements pIFStatement;
	private final FunctionElements pFunction;
	private final FormElements pForm;
	
	private final Grammar grammar;

	private final XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations;

	@Inject
	public LanguageGrammarAccess(GrammarProvider grammarProvider,
		XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbaseWithAnnotations = gaXbaseWithAnnotations;
		this.pBotLanguage = new BotLanguageElements();
		this.pInstruction = new InstructionElements();
		this.pButton = new ButtonElements();
		this.pLoginURL = new LoginURLElements();
		this.pLogout = new LogoutElements();
		this.pUsername = new UsernameElements();
		this.pPassword = new PasswordElements();
		this.pNotificationAdress = new NotificationAdressElements();
		this.pStart = new StartElements();
		this.pDATE = new DATEElements();
		this.tDATE_FORMAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DATE_FORMAT");
		this.tYEAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "YEAR");
		this.pStop = new StopElements();
		this.pVar = new VarElements();
		this.pFORLoop = new FORLoopElements();
		this.pIFStatement = new IFStatementElements();
		this.pFunction = new FunctionElements();
		this.pForm = new FormElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.language.Language".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseWithAnnotationsGrammarAccess getXbaseWithAnnotationsGrammarAccess() {
		return gaXbaseWithAnnotations;
	}

	
	//// Language exists of Instructions
	//BotLanguage:
	//	{BotLanguage} instructions+=Instruction*;
	public BotLanguageElements getBotLanguageAccess() {
		return pBotLanguage;
	}
	
	public ParserRule getBotLanguageRule() {
		return getBotLanguageAccess().getRule();
	}

	//// The Bot Language contains 6 different instructions including variables
	//// loops, conditions, functons and the username and the password for the login
	//Instruction returns xbase::XExpression:
	//	Var | FORLoop | IFStatement | Function | Form | Username | Password | NotificationAdress | Start | Stop | LoginURL |
	//	Logout | Button;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//Button:
	//	"button " name=STRING " at " STRING;
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}

	//LoginURL:
	//	{LoginURL} "loginURL = " name=STRING;
	public LoginURLElements getLoginURLAccess() {
		return pLoginURL;
	}
	
	public ParserRule getLoginURLRule() {
		return getLoginURLAccess().getRule();
	}

	//Logout:
	//	{Logout} "logout " name=STRING " at " STRING;
	public LogoutElements getLogoutAccess() {
		return pLogout;
	}
	
	public ParserRule getLogoutRule() {
		return getLogoutAccess().getRule();
	}

	//// definition of the username with key 'username'	
	//Username:
	//	{Username} "username " name=STRING " at " STRING;
	public UsernameElements getUsernameAccess() {
		return pUsername;
	}
	
	public ParserRule getUsernameRule() {
		return getUsernameAccess().getRule();
	}

	//// definition of the password with key 'password'	
	//Password:
	//	{Password} "password " name=STRING " at " STRING;
	public PasswordElements getPasswordAccess() {
		return pPassword;
	}
	
	public ParserRule getPasswordRule() {
		return getPasswordAccess().getRule();
	}

	//// address for notification mails
	//NotificationAdress:
	//	{NotificationAdress} "address =" name=STRING;
	public NotificationAdressElements getNotificationAdressAccess() {
		return pNotificationAdress;
	}
	
	public ParserRule getNotificationAdressRule() {
		return getNotificationAdressAccess().getRule();
	}

	//Start:
	//	{Start} "start" name=DATE;
	public StartElements getStartAccess() {
		return pStart;
	}
	
	public ParserRule getStartRule() {
		return getStartAccess().getRule();
	}

	//DATE:
	//	day=DATE_FORMAT "." month=DATE_FORMAT "." year=YEAR " " hours=DATE_FORMAT ":" minutes=DATE_FORMAT ":"
	//	second=DATE_FORMAT;
	public DATEElements getDATEAccess() {
		return pDATE;
	}
	
	public ParserRule getDATERule() {
		return getDATEAccess().getRule();
	}

	//terminal DATE_FORMAT:
	//	"0" "0".."9" | "1".."5" "0".."9";
	public TerminalRule getDATE_FORMATRule() {
		return tDATE_FORMAT;
	} 

	//terminal YEAR:
	//	"2".."9" "0".."9" "0".."9" "0".."9";
	public TerminalRule getYEARRule() {
		return tYEAR;
	} 

	//Stop:
	//	{Stop} "stop" name=DATE;
	public StopElements getStopAccess() {
		return pStop;
	}
	
	public ParserRule getStopRule() {
		return getStopAccess().getRule();
	}

	//// definition of varialbles with key 'var'	
	//Var:
	//	"var"? name=ID "=" (STRING | INT)?;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}

	//FORLoop returns xbase::XForLoopExpression:
	//	"for" (declaredParam=JvmFormalParameter ":" forExpression=XExpression) (eachExpression=Function |
	//	eachExpression=Var);
	public FORLoopElements getFORLoopAccess() {
		return pFORLoop;
	}
	
	public ParserRule getFORLoopRule() {
		return getFORLoopAccess().getRule();
	}

	//IFStatement returns xbase::XIfExpression:
	//	"if" if=XExpression "then" then=Function | then=Var "else" else=Function | "else" else=Var;
	public IFStatementElements getIFStatementAccess() {
		return pIFStatement;
	}
	
	public ParserRule getIFStatementRule() {
		return getIFStatementAccess().getRule();
	}

	////ELSEIFStatement returns xbase::XIfExpression:
	////	{IFStatement}
	////	'elseif' if = XExpression
	////	'then' then = Function | then = Var
	////	else = ELSEIFStatement | 'else' else = Function | 'else' else = Var
	////;
	//// definition of functions with key 'func'	
	//Function:
	//	"func" name=ID "(" actions+=Var* ")" "at" // Spaeter evtl XPATH spezieller striung als regel	
	//	STRING;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//Form:
	//	{Form} "form = " name=STRING "at" //Xpath
	//	STRING;
	public FormElements getFormAccess() {
		return pForm;
	}
	
	public ParserRule getFormRule() {
		return getFormAccess().getRule();
	}

	//XAnnotation:
	//	{XAnnotation} "@" annotationType=[types::JvmAnnotationType|QualifiedName] ("("
	//	(elementValuePairs+=XAnnotationElementValuePair ("," elementValuePairs+=XAnnotationElementValuePair)* |
	//	value=XAnnotationElementValueOrCommaList)? ")")?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//XAnnotationElementValuePair:
	//	=> (element=[types::JvmOperation|ValidID] "=") value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}

	//XAnnotationElementValueOrCommaList returns xbase::XExpression:
	//	=> ({xbase::XListLiteral} "#" "[") (elements+=XAnnotationOrExpression ("," elements+=XAnnotationOrExpression)*)? "]"
	//	| XAnnotationOrExpression ({xbase::XListLiteral.elements+=current} ("," elements+=XAnnotationOrExpression)+)?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueOrCommaListElements getXAnnotationElementValueOrCommaListAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueOrCommaListAccess();
	}
	
	public ParserRule getXAnnotationElementValueOrCommaListRule() {
		return getXAnnotationElementValueOrCommaListAccess().getRule();
	}

	//XAnnotationElementValue returns xbase::XExpression:
	//	=> ({xbase::XListLiteral} "#" "[") (elements+=XAnnotationOrExpression ("," elements+=XAnnotationOrExpression)*)? "]"
	//	| XAnnotationOrExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}

	//XAnnotationOrExpression returns xbase::XExpression:
	//	XAnnotation | XExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationOrExpressionElements getXAnnotationOrExpressionAccess() {
		return gaXbaseWithAnnotations.getXAnnotationOrExpressionAccess();
	}
	
	public ParserRule getXAnnotationOrExpressionRule() {
		return getXAnnotationOrExpressionAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbaseWithAnnotations.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbaseWithAnnotations.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbaseWithAnnotations.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbaseWithAnnotations.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbaseWithAnnotations.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbaseWithAnnotations.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbaseWithAnnotations.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbaseWithAnnotations.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbaseWithAnnotations.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbaseWithAnnotations.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbaseWithAnnotations.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbaseWithAnnotations.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbaseWithAnnotations.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbaseWithAnnotations.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbaseWithAnnotations.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbaseWithAnnotations.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbaseWithAnnotations.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbaseWithAnnotations.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbaseWithAnnotations.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbaseWithAnnotations.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbaseWithAnnotations.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbaseWithAnnotations.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbaseWithAnnotations.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbaseWithAnnotations.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbaseWithAnnotations.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbaseWithAnnotations.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbaseWithAnnotations.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbaseWithAnnotations.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbaseWithAnnotations.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbaseWithAnnotations.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbaseWithAnnotations.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbaseWithAnnotations.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbaseWithAnnotations.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbaseWithAnnotations.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":"
	//	default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbaseWithAnnotations.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbaseWithAnnotations.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbaseWithAnnotations.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbaseWithAnnotations.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbaseWithAnnotations.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbaseWithAnnotations.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbaseWithAnnotations.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbaseWithAnnotations.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbaseWithAnnotations.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbaseWithAnnotations.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbaseWithAnnotations.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbaseWithAnnotations.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbaseWithAnnotations.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbaseWithAnnotations.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbaseWithAnnotations.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbaseWithAnnotations.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbaseWithAnnotations.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbaseWithAnnotations.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbaseWithAnnotations.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbaseWithAnnotations.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbaseWithAnnotations.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbaseWithAnnotations.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbaseWithAnnotations.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbaseWithAnnotations.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbaseWithAnnotations.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbaseWithAnnotations.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbaseWithAnnotations.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbaseWithAnnotations.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbaseWithAnnotations.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbaseWithAnnotations.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbaseWithAnnotations.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbaseWithAnnotations.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbaseWithAnnotations.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbaseWithAnnotations.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbaseWithAnnotations.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbaseWithAnnotations.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbaseWithAnnotations.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbaseWithAnnotations.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbaseWithAnnotations.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbaseWithAnnotations.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbaseWithAnnotations.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbaseWithAnnotations.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbaseWithAnnotations.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbaseWithAnnotations.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXbaseWithAnnotations.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbaseWithAnnotations.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbaseWithAnnotations.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbaseWithAnnotations.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbaseWithAnnotations.getANY_OTHERRule();
	} 
}
